<!doctype html>
<html lang="en">


<title>Utilities & OHLC </title>

<head>
    <title>TD Authorization </title>
    <%- include('../../views/partials/head.ejs') %>

</head>
<body>
    <%- include('../../views/partials/menu.ejs') %>
    <center>
        <h1 class="mb-3">
            TD Ameritrade Utils & OHLC
        </h1>
    </center>

    <div class="container mx-auto">
        <p>
            The first step in pulling data is to decide what tickers we want to pull data for, I found this easier to do using
            a spreadsheet saved as a single column csv file. Once you have decided who you want to pull data for and have
            we have a refresh token we can use it to get a temporary (30 minute) <a href="#">authorization token</a>. Since we will have a
            lot of variables to keep track of it will help to create a .env file so we can store them as environment variables.
            Never ever commit the .env file to a public repository unless you want people to have access to your account.
            Your .env file should look something like this, filled in with your own information
        </p>
        <div class="container mx-auto mb-4">
            <script src="https://gist.github.com/brandonsimpson21/6a303333af5a873734574bd754430910.js?file=env_file.js"></script>
        </div>

        <p>Lets get an authorization token!  Without further ado here’s how we do it</p>

        <div class="container mx-auto mb-4">
            <script src="https://gist.github.com/brandonsimpson21/6a303333af5a873734574bd754430910.js?file=getAuthToken.js"></script>
        </div>

        <p>
            There are a few subtleties here, by default Axios serializes javascript objects to JSON, since our header includes 'application/x-www-form-urlencoded'
            we use the qs library to stringify data section of the request. In the requestNewAuthToken function be sure to change path_to_save_token to the path
            where you want to store the token. This token is only good for 30 minutes so we need some functions to help us check if the token has expired, and
            to pull just the token value from the object.  This can be accomplished with the following two functions. In the final line of the check token expiry
            function we first look if the time the file was created and the time it was last modified is greater than 30 minutes.
        </p>

        <div class="container mx-auto mb-4">
            <script src="https://gist.github.com/brandonsimpson21/6a303333af5a873734574bd754430910.js?file=getcheckExpiryGetValue.js"></script>
        </div>

        <p>
            We don’t want to have to manually check token expiry and then manually get a new token every time we make a request. To solve this problem lets
            create an Axios interceptor. An interceptor will run some logic before making a request, in this case we want to check whether or not the token
            is expired, and if it is expired get a new one. The function takes in a URL configuration and automatically modifies the header of the request
            to include a valid token
        </p>

        <div class="container mx-auto mb-4">
            <script src="https://gist.github.com/brandonsimpson21/6a303333af5a873734574bd754430910.js?file=axiosInterceptor.js"></script>
        </div>

        <p>
            Before we start pulling data let’s take a look at what data we can pull and what settings the TDA Get Price History API allows. The first method is
            to pull data using a period, preriodType, frequency, and frequencyType. An easy way to think about what these do is to put them in a sentence,
            something like  ‘id like data for every frequency frequencytype for period period type” and then substitute in what you want. For example  ‘I’d
            like data for every 1 minute for 2 days.’ In this example period=2, periodType=day, frequency=1, and frequencyType=min. The second method, and the
            one I prefer is to give it start and end dates (as milliseconds since epoch), periodType, frequencyType, and frequency.

            Finally we are ready to start pulling data! But here’s the catch, the api only allows you to make two requests per second. So if we tried to loop
            through a bunch of ticker symbols we are going to run into errors. You might be tempted to just throw in a setTimeout , but this can run into all
            kinds of problems including, but not limited to, using up all the heap memory. The solution, that will work and scale well,  is to create a delay
            queue using the Bull library. Bull is a queue library that utilizes redis, so the first step is to install redis. Once you have a redis server up
            and running we can start building the queue.
        </p>

        <center class="mb-4">
            <img src="/Images/get_price_quote_url.png" width="60%" height="60%">
        </center>

        <p>
            So we need to construct different requests for each ticker symbol we are interested in. The first step is to create an array filled with all the ticker
            symbols we put in our .csv file. This is a little more challenging in node than it would be for python. The following function takes as input the path to
            the .csv file and outputs an array whose elements are the ticker symbols.
        </p>

        <div class="container mx-auto mb-4">
            <script src="https://gist.github.com/brandonsimpson21/6a303333af5a873734574bd754430910.js?file=csvToTickerArr.js"></script>
        </div>

        <p>With our ticker array in hand we can loop through each one and construct the correct request.</p>

        <div class="container mx-auto mb-4">
            <script src="https://gist.github.com/brandonsimpson21/6a303333af5a873734574bd754430910.js?file=requestsArray.js"></script>
        </div>

        <P>And poof! we have every request we want to make. Now we need to add them to the delay queue. </P>

        <div class="container mx-auto mb-4">
            <script src="https://gist.github.com/brandonsimpson21/6a303333af5a873734574bd754430910.js?file=requestQueue.js"></script>
        </div>

        <p>
            There are more efficient ways than a bunch of for each calls but this is boring OHLC data, we will get more quant-y future
            posts. stay tuned :D
        </p>



    </div>
</body>
